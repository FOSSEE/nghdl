1. Compile C code and generate object file - 
avr-gcc -g -Os -mmcu=attiny85 -c Name_of_C_Code.c

2. Generate .elf file from object file - 
avr-gcc -g -mmcu=attiny85 -o Name_of_C_Code.elf Name_of_C_Code.o

3. Disassemble elf file - 
avr-objdump -h -S Name_of_C_Code.elf

The above commands dumps data into terminal itself, to copy it into a text file instead,
create a new txt file and name it "zyx.txt", and modify the command to this - 
3.1. avr-objdump -h -S Name_of_C_Code.elf >> xyz.txt

4. Generate Hex File - 
avr-objcopy -j .text -j .data -O ihex Name_of_C_Code.elf Name_of_C_Code.hex


***************************************************************************************************************************
Architectures to be followed for different MCUs - 
https://gcc.gnu.org/onlinedocs/gcc/AVR-Options.html
https://www.microchip.com/webdoc/avrlibcreferencemanual/using_tools_1using_avr_gcc_mach_opt.html

AVR -objdump documentation - 
http://ccrma.stanford.edu/planetccrma/man/man1/avr-objdump.1.html


Complete guide from compiling to burning in microcotroller - 
https://blog.podkalicki.com/how-to-compile-and-burn-the-code-to-avr-chip-on-linuxmacosxwindows/
https://www.nongnu.org/avr-libc/user-manual/group__demo__project.html

Timer-
https://blog.podkalicki.com/attiny13-hardware-pwm/
