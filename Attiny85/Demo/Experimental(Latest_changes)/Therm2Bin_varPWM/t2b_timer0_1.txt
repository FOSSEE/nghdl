
t2b_timer0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000074  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000057c  00000000  00000000  000000e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bcc  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	21 c0       	rjmp	.+66     	; 0x70 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#define N_1    (_BV(CS00))

static void
pwm_init(void)
{
    DDRB |= _BV(PB0); // set PWM pin as OUTPUT
  30:	b8 9a       	sbi	0x17, 0	; 23
    TCCR0A |= _BV(WGM01)|_BV(WGM00); // set timer mode to FAST PWM
  32:	8a b5       	in	r24, 0x2a	; 42
  34:	83 60       	ori	r24, 0x03	; 3
  36:	8a bd       	out	0x2a, r24	; 42
    TCCR0A |= _BV(COM0A1); // connect PWM signal to pin (AC0A => PB0)
  38:	8a b5       	in	r24, 0x2a	; 42
  3a:	80 68       	ori	r24, 0x80	; 128
  3c:	8a bd       	out	0x2a, r24	; 42
 -> F(N_1024) = 4Hz */
static void
pwm_set_frequency(uint32_t N)
{

    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | N; // set prescaler
  3e:	83 b7       	in	r24, 0x33	; 51
  40:	88 7f       	andi	r24, 0xF8	; 248
  42:	81 60       	ori	r24, 0x01	; 1
  44:	83 bf       	out	0x33, r24	; 51

static void
pwm_set_duty(uint8_t duty)
{

    OCR0A = duty; // set the OCRnx
  46:	9c ec       	ldi	r25, 0xCC	; 204
  48:	29 e9       	ldi	r18, 0x99	; 153
  4a:	36 e6       	ldi	r19, 0x66	; 102
  4c:	43 e3       	ldi	r20, 0x33	; 51
    pwm_set_frequency(N_1);


    while (1) 
    {
    	unsigned char a = PINB;
  4e:	86 b3       	in	r24, 0x16	; 22
    	if(a == 0x0)			//20% duty
  50:	81 11       	cpse	r24, r1
  52:	02 c0       	rjmp	.+4      	; 0x58 <__SREG__+0x19>

static void
pwm_set_duty(uint8_t duty)
{

    OCR0A = duty; // set the OCRnx
  54:	49 bd       	out	0x29, r20	; 41
  56:	fb cf       	rjmp	.-10     	; 0x4e <__SREG__+0xf>
    while (1) 
    {
    	unsigned char a = PINB;
    	if(a == 0x0)			//20% duty
			pwm_set_duty(51);
		else if(a == 0x02)		//40% duty
  58:	82 30       	cpi	r24, 0x02	; 2
  5a:	11 f4       	brne	.+4      	; 0x60 <__SREG__+0x21>

static void
pwm_set_duty(uint8_t duty)
{

    OCR0A = duty; // set the OCRnx
  5c:	39 bd       	out	0x29, r19	; 41
  5e:	f7 cf       	rjmp	.-18     	; 0x4e <__SREG__+0xf>
    	unsigned char a = PINB;
    	if(a == 0x0)			//20% duty
			pwm_set_duty(51);
		else if(a == 0x02)		//40% duty
			pwm_set_duty(102);
		else if(a == 0x04)		//60% duty
  60:	84 30       	cpi	r24, 0x04	; 4
  62:	11 f4       	brne	.+4      	; 0x68 <__SREG__+0x29>

static void
pwm_set_duty(uint8_t duty)
{

    OCR0A = duty; // set the OCRnx
  64:	29 bd       	out	0x29, r18	; 41
  66:	f3 cf       	rjmp	.-26     	; 0x4e <__SREG__+0xf>
			pwm_set_duty(51);
		else if(a == 0x02)		//40% duty
			pwm_set_duty(102);
		else if(a == 0x04)		//60% duty
			pwm_set_duty(153);
		else if(a == 0x06)		//80% duty
  68:	86 30       	cpi	r24, 0x06	; 6
  6a:	89 f7       	brne	.-30     	; 0x4e <__SREG__+0xf>

static void
pwm_set_duty(uint8_t duty)
{

    OCR0A = duty; // set the OCRnx
  6c:	99 bd       	out	0x29, r25	; 41
  6e:	ef cf       	rjmp	.-34     	; 0x4e <__SREG__+0xf>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
