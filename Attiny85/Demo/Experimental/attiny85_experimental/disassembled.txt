
t2b_varPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a2  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000660  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000be5  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	38 c0       	rjmp	.+112    	; 0x9e <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#define F_CPU 1.0E6
#include<util/delay.h>

int main (void)
{
  DDRB=0x01;
  30:	81 e0       	ldi	r24, 0x01	; 1
  32:	87 bb       	out	0x17, r24	; 23
  while(1)
  {
    if(PINB == 0x00) //20% duty
  34:	96 b3       	in	r25, 0x16	; 22
  36:	91 11       	cpse	r25, r1
  38:	0a c0       	rjmp	.+20     	; 0x4e <__SREG__+0xf>
    {
      PORTB = 0x01;
  3a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3c:	96 e0       	ldi	r25, 0x06	; 6
  3e:	9a 95       	dec	r25
  40:	f1 f7       	brne	.-4      	; 0x3e <__SP_H__>
  42:	00 c0       	rjmp	.+0      	; 0x44 <__SREG__+0x5>
      _delay_us(20);
      PORTB = 0x0;
  44:	18 ba       	out	0x18, r1	; 24
  46:	9a e1       	ldi	r25, 0x1A	; 26
  48:	9a 95       	dec	r25
  4a:	f1 f7       	brne	.-4      	; 0x48 <__SREG__+0x9>
  4c:	26 c0       	rjmp	.+76     	; 0x9a <__SREG__+0x5b>
      _delay_us(80);
    }
    else if(PINB == 0x02)  //40% duty
  4e:	96 b3       	in	r25, 0x16	; 22
  50:	92 30       	cpi	r25, 0x02	; 2
  52:	51 f4       	brne	.+20     	; 0x68 <__SREG__+0x29>
    {   
      PORTB = 0x01;
  54:	88 bb       	out	0x18, r24	; 24
  56:	9d e0       	ldi	r25, 0x0D	; 13
  58:	9a 95       	dec	r25
  5a:	f1 f7       	brne	.-4      	; 0x58 <__SREG__+0x19>
  5c:	00 00       	nop
      _delay_us(40);
      PORTB = 0x0;
  5e:	18 ba       	out	0x18, r1	; 24
  60:	94 e1       	ldi	r25, 0x14	; 20
  62:	9a 95       	dec	r25
  64:	f1 f7       	brne	.-4      	; 0x62 <__SREG__+0x23>
  66:	e6 cf       	rjmp	.-52     	; 0x34 <main+0x4>
      _delay_us(60);
    }
    else if(PINB == 0x04)  //60% duty
  68:	96 b3       	in	r25, 0x16	; 22
  6a:	94 30       	cpi	r25, 0x04	; 4
  6c:	51 f4       	brne	.+20     	; 0x82 <__SREG__+0x43>
    {   
      PORTB = 0x01;
  6e:	88 bb       	out	0x18, r24	; 24
  70:	94 e1       	ldi	r25, 0x14	; 20
  72:	9a 95       	dec	r25
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
      _delay_us(60);
      PORTB = 0x0;
  76:	18 ba       	out	0x18, r1	; 24
  78:	9d e0       	ldi	r25, 0x0D	; 13
  7a:	9a 95       	dec	r25
  7c:	f1 f7       	brne	.-4      	; 0x7a <__SREG__+0x3b>
  7e:	00 00       	nop
  80:	d9 cf       	rjmp	.-78     	; 0x34 <main+0x4>
      _delay_us(40);
    }
    else if(PINB == 0x06)  //80% duty
  82:	96 b3       	in	r25, 0x16	; 22
  84:	96 30       	cpi	r25, 0x06	; 6
  86:	b1 f6       	brne	.-84     	; 0x34 <main+0x4>
    {   
      PORTB = 0x01;
  88:	88 bb       	out	0x18, r24	; 24
  8a:	9a e1       	ldi	r25, 0x1A	; 26
  8c:	9a 95       	dec	r25
  8e:	f1 f7       	brne	.-4      	; 0x8c <__SREG__+0x4d>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__SREG__+0x53>
      _delay_us(80);
      PORTB = 0x0;
  92:	18 ba       	out	0x18, r1	; 24
  94:	96 e0       	ldi	r25, 0x06	; 6
  96:	9a 95       	dec	r25
  98:	f1 f7       	brne	.-4      	; 0x96 <__SREG__+0x57>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <__SREG__+0x5d>
  9c:	cb cf       	rjmp	.-106    	; 0x34 <main+0x4>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
